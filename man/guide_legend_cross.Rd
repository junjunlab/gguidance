% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/guide_legend_cross.R
\name{guide_legend_cross}
\alias{guide_legend_cross}
\title{Cross table legend guide}
\usage{
guide_legend_cross(
  label_order = c("row", "column"),
  h_label.theme = element_text(),
  h_label.position = "right",
  v_label.theme = element_text(angle = 90, vjust = 0.5),
  v_label.position = "bottom",
  sep = "[^[:alnum:]]+",
  reverse = FALSE,
  ...
)
}
\arguments{
\item{label_order}{A \code{character(2)} giving the order of dimensions to which
the first and second label should map to. Can either be
\code{c("row", "column")} or \code{c("column", "row")}.}

\item{h_label.theme, v_label.theme}{An
\code{\link[ggplot2:element]{<element_text>}} (default) or \verb{<element_blank>}
object controlling the appearance of horizontal (left/right) or vertical
(top/bottom) labels respectively. These inherit from the \code{legend.text}
setting the the plot's theme.}

\item{h_label.position, v_label.position}{A \code{character(1)} indicating the
position of a label. \code{h_label.position} can be one of \code{"left"} or
\code{"right"} (default), whereas \code{v_label.position} can be one of \code{"top"}
or \code{"bottom"} (default).}

\item{sep}{A \code{character(1)} acting as a \link[base:regex]{'regex'} pattern to
split a label into two parts. Defaults to any non-alphanumeric pattern.
Note that special characters need to be escaped, so splitting on a period
would have to be \code{"\\\\."}.}

\item{reverse}{A \code{logical(2)} or \code{logical(1)} that internally gets recycled
to length 2. If \code{reverse[1]} is \code{TRUE}, reverses the order of the first
label. If \code{reverse[2]} is \code{TRUE}, reverses the order of the second label.
Defaults to \code{c(FALSE, FALSE)}.}

\item{...}{
  Arguments passed on to \code{\link[=guide_legend_vanilla]{guide_legend_vanilla}}
  \describe{
    \item{\code{title}}{A character string or expression indicating a title of guide.
If \code{NULL}, the title is not shown. By default
(\code{\link[ggplot2:waiver]{waiver()}}), the name of the scale object or the name
specified in \code{\link[ggplot2:labs]{labs()}} is used for the title.}
    \item{\code{title.position}}{A character string indicating the position of a
title. One of "top" (default for a vertical guide), "bottom", "left"
(default for a horizontal guide), or "right."}
    \item{\code{title.theme}}{A theme object for rendering the title text. Usually the
object of \code{\link[ggplot2:element_text]{element_text()}} is expected. By default, the theme is
specified by \code{legend.title} in \code{\link[ggplot2:theme]{theme()}} or theme.}
    \item{\code{title.hjust}}{A number specifying horizontal justification of the
title text.}
    \item{\code{title.vjust}}{A number specifying vertical justification of the title
text.}
    \item{\code{keywidth}}{A numeric or a \code{\link[grid:unit]{grid::unit()}} object specifying
the width of the legend key. Default value is \code{legend.key.width} or
\code{legend.key.size} in \code{\link[ggplot2:theme]{theme()}}.}
    \item{\code{keyheight}}{A numeric or a \code{\link[grid:unit]{grid::unit()}} object specifying
the height of the legend key. Default value is \code{legend.key.height} or
\code{legend.key.size} in \code{\link[ggplot2:theme]{theme()}}.}
    \item{\code{direction}}{A character string indicating the direction of the guide.
One of "horizontal" or "vertical."}
    \item{\code{default.unit}}{A character string indicating \code{\link[grid:unit]{grid::unit()}}
for \code{keywidth} and \code{keyheight}.}
    \item{\code{override.aes}}{A list specifying aesthetic parameters of legend key.
See details and examples.}
    \item{\code{order}}{positive integer less than 99 that specifies the order of
this guide among multiple guides. This controls the order in which
multiple guides are displayed, not the contents of the guide itself.
If 0 (default), the order is determined by a secret algorithm.}
  }}
}
\value{
A \verb{<Guide>} ggproto object that can be given to the
\code{\link[ggplot2:guides]{guides()}} function, or set as the \code{guide} argument
in a non-position scale.
}
\description{
Like regular legends, this guide shows keys mapped onto values. It is useful
for displaying the interaction of two variables more intuitively than a
linear legend.
}
\details{
This guide finds an interaction of two variables by trying to split
a compound label. Unfortunately, this might require some work to format
splittable labels. Moreover, if one intends to use this guide to show
an interaction between, for example: shapes and colours, both the shape
and colour scales should return compound labels.
}
\examples{
# Display interaction by mapping a compound variable
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(colour = paste(cyl, year))) +
  guides(colour = "legend_cross")

# Combining a colour legend and shape legend requires some care to map
# a compound variable consistently to keys.
# For example: there is no 'cyl = 5, year = 1999' combination in the plot
# below, so we need to repeat values carefully.
ggplot(transform(mpg, cylyear = paste(cyl, year)),
       aes(displ, hwy)) +
  geom_point(aes(colour = cylyear, shape = cylyear)) +
  scale_colour_manual(
    values = rep(c("dodgerblue", "forestgreen", "tomato", "goldenrod"),
                 c(2,1,2,2)),
    guide = "legend_cross"
  ) +
  scale_shape_manual(
    values = c(19, 1, 1, 19, 1, 19, 1),
    guide = "legend_cross"
  )
}
\seealso{
Other legend variants: 
\code{\link{guide_legend_vanilla}()}
}
\concept{legend variants}
